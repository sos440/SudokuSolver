/* ***********************************************
	Need:
	object_model.js
	puzzle_class.js
*********************************************** */

/* ***********************************************
	Macro constants
*********************************************** */
// Logical unit : Grid
var LU_GRID = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80];

// Logical unit : Rows
var LU_ROW_DATA = [
	[0, 1, 2, 3, 4, 5, 6, 7, 8], 
	[9, 10, 11, 12, 13, 14, 15, 16, 17], 
	[18, 19, 20, 21, 22, 23, 24, 25, 26], 
	[27, 28, 29, 30, 31, 32, 33, 34, 35], 
	[36, 37, 38, 39, 40, 41, 42, 43, 44], 
	[45, 46, 47, 48, 49, 50, 51, 52, 53], 
	[54, 55, 56, 57, 58, 59, 60, 61, 62], 
	[63, 64, 65, 66, 67, 68, 69, 70, 71], 
	[72, 73, 74, 75, 76, 77, 78, 79, 80]
];

// Logical unit : Columns
var LU_COL_DATA = [
	[0, 9, 18, 27, 36, 45, 54, 63, 72], 
	[1, 10, 19, 28, 37, 46, 55, 64, 73], 
	[2, 11, 20, 29, 38, 47, 56, 65, 74], 
	[3, 12, 21, 30, 39, 48, 57, 66, 75], 
	[4, 13, 22, 31, 40, 49, 58, 67, 76], 
	[5, 14, 23, 32, 41, 50, 59, 68, 77], 
	[6, 15, 24, 33, 42, 51, 60, 69, 78], 
	[7, 16, 25, 34, 43, 52, 61, 70, 79], 
	[8, 17, 26, 35, 44, 53, 62, 71, 80]
];

// Logical unit : Boxes
var LU_BOX_DATA = [
	[0, 1, 2, 9, 10, 11, 18, 19, 20], 
	[3, 4, 5, 12, 13, 14, 21, 22, 23], 
	[6, 7, 8, 15, 16, 17, 24, 25, 26], 
	[27, 28, 29, 36, 37, 38, 45, 46, 47], 
	[30, 31, 32, 39, 40, 41, 48, 49, 50], 
	[33, 34, 35, 42, 43, 44, 51, 52, 53], 
	[54, 55, 56, 63, 64, 65, 72, 73, 74], 
	[57, 58, 59, 66, 67, 68, 75, 76, 77], 
	[60, 61, 62, 69, 70, 71, 78, 79, 80]
];

// Logical unit : Basic Rule
var LU_FT_BASIC = [
	[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 27, 36, 45, 54, 63, 72], 
	[0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 28, 37, 46, 55, 64, 73], 
	[0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 18, 19, 20, 29, 38, 47, 56, 65, 74], 
	[0, 1, 2, 4, 5, 6, 7, 8, 12, 13, 14, 21, 22, 23, 30, 39, 48, 57, 66, 75], 
	[0, 1, 2, 3, 5, 6, 7, 8, 12, 13, 14, 21, 22, 23, 31, 40, 49, 58, 67, 76], 
	[0, 1, 2, 3, 4, 6, 7, 8, 12, 13, 14, 21, 22, 23, 32, 41, 50, 59, 68, 77], 
	[0, 1, 2, 3, 4, 5, 7, 8, 15, 16, 17, 24, 25, 26, 33, 42, 51, 60, 69, 78], 
	[0, 1, 2, 3, 4, 5, 6, 8, 15, 16, 17, 24, 25, 26, 34, 43, 52, 61, 70, 79], 
	[0, 1, 2, 3, 4, 5, 6, 7, 15, 16, 17, 24, 25, 26, 35, 44, 53, 62, 71, 80], 
	[0, 1, 2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 36, 45, 54, 63, 72], 
	[0, 1, 2, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 37, 46, 55, 64, 73], 
	[0, 1, 2, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 29, 38, 47, 56, 65, 74], 
	[3, 4, 5, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 23, 30, 39, 48, 57, 66, 75], 
	[3, 4, 5, 9, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 31, 40, 49, 58, 67, 76], 
	[3, 4, 5, 9, 10, 11, 12, 13, 15, 16, 17, 21, 22, 23, 32, 41, 50, 59, 68, 77], 
	[6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 24, 25, 26, 33, 42, 51, 60, 69, 78], 
	[6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 24, 25, 26, 34, 43, 52, 61, 70, 79], 
	[6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 24, 25, 26, 35, 44, 53, 62, 71, 80], 
	[0, 1, 2, 9, 10, 11, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 45, 54, 63, 72], 
	[0, 1, 2, 9, 10, 11, 18, 20, 21, 22, 23, 24, 25, 26, 28, 37, 46, 55, 64, 73], 
	[0, 1, 2, 9, 10, 11, 18, 19, 21, 22, 23, 24, 25, 26, 29, 38, 47, 56, 65, 74], 
	[3, 4, 5, 12, 13, 14, 18, 19, 20, 22, 23, 24, 25, 26, 30, 39, 48, 57, 66, 75], 
	[3, 4, 5, 12, 13, 14, 18, 19, 20, 21, 23, 24, 25, 26, 31, 40, 49, 58, 67, 76], 
	[3, 4, 5, 12, 13, 14, 18, 19, 20, 21, 22, 24, 25, 26, 32, 41, 50, 59, 68, 77], 
	[6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 33, 42, 51, 60, 69, 78], 
	[6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 34, 43, 52, 61, 70, 79], 
	[6, 7, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35, 44, 53, 62, 71, 80], 
	[0, 9, 18, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 54, 63, 72], 
	[1, 10, 19, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 55, 64, 73], 
	[2, 11, 20, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 47, 56, 65, 74], 
	[3, 12, 21, 27, 28, 29, 31, 32, 33, 34, 35, 39, 40, 41, 48, 49, 50, 57, 66, 75], 
	[4, 13, 22, 27, 28, 29, 30, 32, 33, 34, 35, 39, 40, 41, 48, 49, 50, 58, 67, 76], 
	[5, 14, 23, 27, 28, 29, 30, 31, 33, 34, 35, 39, 40, 41, 48, 49, 50, 59, 68, 77], 
	[6, 15, 24, 27, 28, 29, 30, 31, 32, 34, 35, 42, 43, 44, 51, 52, 53, 60, 69, 78], 
	[7, 16, 25, 27, 28, 29, 30, 31, 32, 33, 35, 42, 43, 44, 51, 52, 53, 61, 70, 79], 
	[8, 17, 26, 27, 28, 29, 30, 31, 32, 33, 34, 42, 43, 44, 51, 52, 53, 62, 71, 80], 
	[0, 9, 18, 27, 28, 29, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 63, 72], 
	[1, 10, 19, 27, 28, 29, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 64, 73], 
	[2, 11, 20, 27, 28, 29, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 56, 65, 74], 
	[3, 12, 21, 30, 31, 32, 36, 37, 38, 40, 41, 42, 43, 44, 48, 49, 50, 57, 66, 75], 
	[4, 13, 22, 30, 31, 32, 36, 37, 38, 39, 41, 42, 43, 44, 48, 49, 50, 58, 67, 76], 
	[5, 14, 23, 30, 31, 32, 36, 37, 38, 39, 40, 42, 43, 44, 48, 49, 50, 59, 68, 77], 
	[6, 15, 24, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 51, 52, 53, 60, 69, 78], 
	[7, 16, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 51, 52, 53, 61, 70, 79], 
	[8, 17, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 51, 52, 53, 62, 71, 80], 
	[0, 9, 18, 27, 28, 29, 36, 37, 38, 46, 47, 48, 49, 50, 51, 52, 53, 54, 63, 72], 
	[1, 10, 19, 27, 28, 29, 36, 37, 38, 45, 47, 48, 49, 50, 51, 52, 53, 55, 64, 73], 
	[2, 11, 20, 27, 28, 29, 36, 37, 38, 45, 46, 48, 49, 50, 51, 52, 53, 56, 65, 74], 
	[3, 12, 21, 30, 31, 32, 39, 40, 41, 45, 46, 47, 49, 50, 51, 52, 53, 57, 66, 75], 
	[4, 13, 22, 30, 31, 32, 39, 40, 41, 45, 46, 47, 48, 50, 51, 52, 53, 58, 67, 76], 
	[5, 14, 23, 30, 31, 32, 39, 40, 41, 45, 46, 47, 48, 49, 51, 52, 53, 59, 68, 77], 
	[6, 15, 24, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 60, 69, 78], 
	[7, 16, 25, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 61, 70, 79], 
	[8, 17, 26, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 62, 71, 80], 
	[0, 9, 18, 27, 36, 45, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 72, 73, 74], 
	[1, 10, 19, 28, 37, 46, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 72, 73, 74], 
	[2, 11, 20, 29, 38, 47, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 72, 73, 74], 
	[3, 12, 21, 30, 39, 48, 54, 55, 56, 58, 59, 60, 61, 62, 66, 67, 68, 75, 76, 77], 
	[4, 13, 22, 31, 40, 49, 54, 55, 56, 57, 59, 60, 61, 62, 66, 67, 68, 75, 76, 77], 
	[5, 14, 23, 32, 41, 50, 54, 55, 56, 57, 58, 60, 61, 62, 66, 67, 68, 75, 76, 77], 
	[6, 15, 24, 33, 42, 51, 54, 55, 56, 57, 58, 59, 61, 62, 69, 70, 71, 78, 79, 80], 
	[7, 16, 25, 34, 43, 52, 54, 55, 56, 57, 58, 59, 60, 62, 69, 70, 71, 78, 79, 80], 
	[8, 17, 26, 35, 44, 53, 54, 55, 56, 57, 58, 59, 60, 61, 69, 70, 71, 78, 79, 80], 
	[0, 9, 18, 27, 36, 45, 54, 55, 56, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], 
	[1, 10, 19, 28, 37, 46, 54, 55, 56, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], 
	[2, 11, 20, 29, 38, 47, 54, 55, 56, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74], 
	[3, 12, 21, 30, 39, 48, 57, 58, 59, 63, 64, 65, 67, 68, 69, 70, 71, 75, 76, 77], 
	[4, 13, 22, 31, 40, 49, 57, 58, 59, 63, 64, 65, 66, 68, 69, 70, 71, 75, 76, 77], 
	[5, 14, 23, 32, 41, 50, 57, 58, 59, 63, 64, 65, 66, 67, 69, 70, 71, 75, 76, 77], 
	[6, 15, 24, 33, 42, 51, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 78, 79, 80], 
	[7, 16, 25, 34, 43, 52, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 78, 79, 80], 
	[8, 17, 26, 35, 44, 53, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 78, 79, 80], 
	[0, 9, 18, 27, 36, 45, 54, 55, 56, 63, 64, 65, 73, 74, 75, 76, 77, 78, 79, 80], 
	[1, 10, 19, 28, 37, 46, 54, 55, 56, 63, 64, 65, 72, 74, 75, 76, 77, 78, 79, 80], 
	[2, 11, 20, 29, 38, 47, 54, 55, 56, 63, 64, 65, 72, 73, 75, 76, 77, 78, 79, 80], 
	[3, 12, 21, 30, 39, 48, 57, 58, 59, 66, 67, 68, 72, 73, 74, 76, 77, 78, 79, 80], 
	[4, 13, 22, 31, 40, 49, 57, 58, 59, 66, 67, 68, 72, 73, 74, 75, 77, 78, 79, 80], 
	[5, 14, 23, 32, 41, 50, 57, 58, 59, 66, 67, 68, 72, 73, 74, 75, 76, 78, 79, 80], 
	[6, 15, 24, 33, 42, 51, 60, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80], 
	[7, 16, 25, 34, 43, 52, 60, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80], 
	[8, 17, 26, 35, 44, 53, 60, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
];

// Row / Box / Intersection
var LU_FT_ROW_TRIAD = [[[3, 4, 5, 6, 7, 8], [9, 10, 11, 18, 19, 20], [0, 1, 2]],
[[0, 1, 2, 6, 7, 8], [12, 13, 14, 21, 22, 23], [3, 4, 5]],
[[0, 1, 2, 3, 4, 5], [15, 16, 17, 24, 25, 26], [6, 7, 8]],
[[12, 13, 14, 15, 16, 17], [0, 1, 2, 18, 19, 20], [9, 10, 11]],
[[9, 10, 11, 15, 16, 17], [3, 4, 5, 21, 22, 23], [12, 13, 14]],
[[9, 10, 11, 12, 13, 14], [6, 7, 8, 24, 25, 26], [15, 16, 17]],
[[21, 22, 23, 24, 25, 26], [0, 1, 2, 9, 10, 11], [18, 19, 20]],
[[18, 19, 20, 24, 25, 26], [3, 4, 5, 12, 13, 14], [21, 22, 23]],
[[18, 19, 20, 21, 22, 23], [6, 7, 8, 15, 16, 17], [24, 25, 26]],
[[30, 31, 32, 33, 34, 35], [36, 37, 38, 45, 46, 47], [27, 28, 29]],
[[27, 28, 29, 33, 34, 35], [39, 40, 41, 48, 49, 50], [30, 31, 32]],
[[27, 28, 29, 30, 31, 32], [42, 43, 44, 51, 52, 53], [33, 34, 35]],
[[39, 40, 41, 42, 43, 44], [27, 28, 29, 45, 46, 47], [36, 37, 38]],
[[36, 37, 38, 42, 43, 44], [30, 31, 32, 48, 49, 50], [39, 40, 41]],
[[36, 37, 38, 39, 40, 41], [33, 34, 35, 51, 52, 53], [42, 43, 44]],
[[48, 49, 50, 51, 52, 53], [27, 28, 29, 36, 37, 38], [45, 46, 47]],
[[45, 46, 47, 51, 52, 53], [30, 31, 32, 39, 40, 41], [48, 49, 50]],
[[45, 46, 47, 48, 49, 50], [33, 34, 35, 42, 43, 44], [51, 52, 53]],
[[57, 58, 59, 60, 61, 62], [63, 64, 65, 72, 73, 74], [54, 55, 56]],
[[54, 55, 56, 60, 61, 62], [66, 67, 68, 75, 76, 77], [57, 58, 59]],
[[54, 55, 56, 57, 58, 59], [69, 70, 71, 78, 79, 80], [60, 61, 62]],
[[66, 67, 68, 69, 70, 71], [54, 55, 56, 72, 73, 74], [63, 64, 65]],
[[63, 64, 65, 69, 70, 71], [57, 58, 59, 75, 76, 77], [66, 67, 68]],
[[63, 64, 65, 66, 67, 68], [60, 61, 62, 78, 79, 80], [69, 70, 71]],
[[75, 76, 77, 78, 79, 80], [54, 55, 56, 63, 64, 65], [72, 73, 74]],
[[72, 73, 74, 78, 79, 80], [57, 58, 59, 66, 67, 68], [75, 76, 77]],
[[72, 73, 74, 75, 76, 77], [60, 61, 62, 69, 70, 71], [78, 79, 80]]];

// Column / Box / Intersection
var LU_FT_COL_TRIAD = [[[27, 36, 45, 54, 63, 72], [1, 2, 10, 11, 19, 20], [0, 9, 18]],
[[0, 9, 18, 54, 63, 72], [28, 29, 37, 38, 46, 47], [27, 36, 45]],
[[0, 9, 18, 27, 36, 45], [55, 56, 64, 65, 73, 74], [54, 63, 72]],
[[28, 37, 46, 55, 64, 73], [0, 2, 9, 11, 18, 20], [1, 10, 19]],
[[1, 10, 19, 55, 64, 73], [27, 29, 36, 38, 45, 47], [28, 37, 46]],
[[1, 10, 19, 28, 37, 46], [54, 56, 63, 65, 72, 74], [55, 64, 73]],
[[29, 38, 47, 56, 65, 74], [0, 1, 9, 10, 18, 19], [2, 11, 20]],
[[2, 11, 20, 56, 65, 74], [27, 28, 36, 37, 45, 46], [29, 38, 47]],
[[2, 11, 20, 29, 38, 47], [54, 55, 63, 64, 72, 73], [56, 65, 74]],
[[30, 39, 48, 57, 66, 75], [4, 5, 13, 14, 22, 23], [3, 12, 21]],
[[3, 12, 21, 57, 66, 75], [31, 32, 40, 41, 49, 50], [30, 39, 48]],
[[3, 12, 21, 30, 39, 48], [58, 59, 67, 68, 76, 77], [57, 66, 75]],
[[31, 40, 49, 58, 67, 76], [3, 5, 12, 14, 21, 23], [4, 13, 22]],
[[4, 13, 22, 58, 67, 76], [30, 32, 39, 41, 48, 50], [31, 40, 49]],
[[4, 13, 22, 31, 40, 49], [57, 59, 66, 68, 75, 77], [58, 67, 76]],
[[32, 41, 50, 59, 68, 77], [3, 4, 12, 13, 21, 22], [5, 14, 23]],
[[5, 14, 23, 59, 68, 77], [30, 31, 39, 40, 48, 49], [32, 41, 50]],
[[5, 14, 23, 32, 41, 50], [57, 58, 66, 67, 75, 76], [59, 68, 77]],
[[33, 42, 51, 60, 69, 78], [7, 8, 16, 17, 25, 26], [6, 15, 24]],
[[6, 15, 24, 60, 69, 78], [34, 35, 43, 44, 52, 53], [33, 42, 51]],
[[6, 15, 24, 33, 42, 51], [61, 62, 70, 71, 79, 80], [60, 69, 78]],
[[34, 43, 52, 61, 70, 79], [6, 8, 15, 17, 24, 26], [7, 16, 25]],
[[7, 16, 25, 61, 70, 79], [33, 35, 42, 44, 51, 53], [34, 43, 52]],
[[7, 16, 25, 34, 43, 52], [60, 62, 69, 71, 78, 80], [61, 70, 79]],
[[35, 44, 53, 62, 71, 80], [6, 7, 15, 16, 24, 25], [8, 17, 26]],
[[8, 17, 26, 62, 71, 80], [33, 34, 42, 43, 51, 52], [35, 44, 53]],
[[8, 17, 26, 35, 44, 53], [60, 61, 69, 70, 78, 79], [62, 71, 80]]];

// Subsets
var LU_SUBS1= [
	null, 
	[[0]], 
	[[0], [1]], 
	[[0], [1], [2]], 
	[[0], [1], [2], [3]], 
	[[0], [1], [2], [3], [4]], 
	[[0], [1], [2], [3], [4], [5]], 
	[[0], [1], [2], [3], [4], [5], [6]], 
	[[0], [1], [2], [3], [4], [5], [6], [7]], 
	[[0], [1], [2], [3], [4], [5], [6], [7], [8]]
	];
var LU_SUBS2= [
	null, 
	null, 
	[[0, 1]], 
	[[0, 1], [0, 2], [1, 2]], 
	[[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]], 
	[[0, 1], [0, 2], [0, 3], [0, 4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]], 
	[[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]], 
	[[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6], [4, 5], [4, 6], [5, 6]], 
	[[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [3, 4], [3, 5], [3, 6], [3, 7], [4, 5], [4, 6], [4, 7], [5, 6], [5, 7], [6, 7]], 
	[[0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [4, 5], [4, 6], [4, 7], [4, 8], [5, 6], [5, 7], [5, 8], [6, 7], [6, 8], [7, 8]]
	];
var LU_SUBS3= [
	null, 
	null, 
	null, 
	[[0, 1, 2]], 
	[[0, 1, 2], [0, 1, 3], [0, 2, 3], [1, 2, 3]], 
	[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 2, 3], [0, 2, 4], [0, 3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]], 
	[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 1, 5], [0, 2, 3], [0, 2, 4], [0, 2, 5], [0, 3, 4], [0, 3, 5], [0, 4, 5], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]], 
	[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 1, 5], [0, 1, 6], [0, 2, 3], [0, 2, 4], [0, 2, 5], [0, 2, 6], [0, 3, 4], [0, 3, 5], [0, 3, 6], [0, 4, 5], [0, 4, 6], [0, 5, 6], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 4, 5], [1, 4, 6], [1, 5, 6], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6], [2, 5, 6], [3, 4, 5], [3, 4, 6], [3, 5, 6], [4, 5, 6]], 
	[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 1, 5], [0, 1, 6], [0, 1, 7], [0, 2, 3], [0, 2, 4], [0, 2, 5], [0, 2, 6], [0, 2, 7], [0, 3, 4], [0, 3, 5], [0, 3, 6], [0, 3, 7], [0, 4, 5], [0, 4, 6], [0, 4, 7], [0, 5, 6], [0, 5, 7], [0, 6, 7], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 2, 7], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 4, 5], [1, 4, 6], [1, 4, 7], [1, 5, 6], [1, 5, 7], [1, 6, 7], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 7], [2, 4, 5], [2, 4, 6], [2, 4, 7], [2, 5, 6], [2, 5, 7], [2, 6, 7], [3, 4, 5], [3, 4, 6], [3, 4, 7], [3, 5, 6], [3, 5, 7], [3, 6, 7], [4, 5, 6], [4, 5, 7], [4, 6, 7], [5, 6, 7]], 
	[[0, 1, 2], [0, 1, 3], [0, 1, 4], [0, 1, 5], [0, 1, 6], [0, 1, 7], [0, 1, 8], [0, 2, 3], [0, 2, 4], [0, 2, 5], [0, 2, 6], [0, 2, 7], [0, 2, 8], [0, 3, 4], [0, 3, 5], [0, 3, 6], [0, 3, 7], [0, 3, 8], [0, 4, 5], [0, 4, 6], [0, 4, 7], [0, 4, 8], [0, 5, 6], [0, 5, 7], [0, 5, 8], [0, 6, 7], [0, 6, 8], [0, 7, 8], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 2, 7], [1, 2, 8], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 3, 8], [1, 4, 5], [1, 4, 6], [1, 4, 7], [1, 4, 8], [1, 5, 6], [1, 5, 7], [1, 5, 8], [1, 6, 7], [1, 6, 8], [1, 7, 8], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 7], [2, 3, 8], [2, 4, 5], [2, 4, 6], [2, 4, 7], [2, 4, 8], [2, 5, 6], [2, 5, 7], [2, 5, 8], [2, 6, 7], [2, 6, 8], [2, 7, 8], [3, 4, 5], [3, 4, 6], [3, 4, 7], [3, 4, 8], [3, 5, 6], [3, 5, 7], [3, 5, 8], [3, 6, 7], [3, 6, 8], [3, 7, 8], [4, 5, 6], [4, 5, 7], [4, 5, 8], [4, 6, 7], [4, 6, 8], [4, 7, 8], [5, 6, 7], [5, 6, 8], [5, 7, 8], [6, 7, 8]]
	];
var LU_SUBS4= [
	null, 
	null, 
	null, 
	null, 
	[[0, 1, 2, 3]], 
	[[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 3, 4], [0, 2, 3, 4], [1, 2, 3, 4]], 
	[[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 4, 5], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 4, 5], [0, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 5], [1, 3, 4, 5], [2, 3, 4, 5]], 
	[[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2, 6], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 3, 6], [0, 1, 4, 5], [0, 1, 4, 6], [0, 1, 5, 6], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 3, 6], [0, 2, 4, 5], [0, 2, 4, 6], [0, 2, 5, 6], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 5, 6], [0, 4, 5, 6], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 5, 6], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 5, 6], [1, 4, 5, 6], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 5, 6], [2, 4, 5, 6], [3, 4, 5, 6]], 
	[[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2, 6], [0, 1, 2, 7], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 3, 6], [0, 1, 3, 7], [0, 1, 4, 5], [0, 1, 4, 6], [0, 1, 4, 7], [0, 1, 5, 6], [0, 1, 5, 7], [0, 1, 6, 7], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 3, 6], [0, 2, 3, 7], [0, 2, 4, 5], [0, 2, 4, 6], [0, 2, 4, 7], [0, 2, 5, 6], [0, 2, 5, 7], [0, 2, 6, 7], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 4, 7], [0, 3, 5, 6], [0, 3, 5, 7], [0, 3, 6, 7], [0, 4, 5, 6], [0, 4, 5, 7], [0, 4, 6, 7], [0, 5, 6, 7], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 6, 7], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 6, 7], [1, 5, 6, 7], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 6, 7], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 6, 7], [2, 5, 6, 7], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7], [4, 5, 6, 7]], 
	[[0, 1, 2, 3], [0, 1, 2, 4], [0, 1, 2, 5], [0, 1, 2, 6], [0, 1, 2, 7], [0, 1, 2, 8], [0, 1, 3, 4], [0, 1, 3, 5], [0, 1, 3, 6], [0, 1, 3, 7], [0, 1, 3, 8], [0, 1, 4, 5], [0, 1, 4, 6], [0, 1, 4, 7], [0, 1, 4, 8], [0, 1, 5, 6], [0, 1, 5, 7], [0, 1, 5, 8], [0, 1, 6, 7], [0, 1, 6, 8], [0, 1, 7, 8], [0, 2, 3, 4], [0, 2, 3, 5], [0, 2, 3, 6], [0, 2, 3, 7], [0, 2, 3, 8], [0, 2, 4, 5], [0, 2, 4, 6], [0, 2, 4, 7], [0, 2, 4, 8], [0, 2, 5, 6], [0, 2, 5, 7], [0, 2, 5, 8], [0, 2, 6, 7], [0, 2, 6, 8], [0, 2, 7, 8], [0, 3, 4, 5], [0, 3, 4, 6], [0, 3, 4, 7], [0, 3, 4, 8], [0, 3, 5, 6], [0, 3, 5, 7], [0, 3, 5, 8], [0, 3, 6, 7], [0, 3, 6, 8], [0, 3, 7, 8], [0, 4, 5, 6], [0, 4, 5, 7], [0, 4, 5, 8], [0, 4, 6, 7], [0, 4, 6, 8], [0, 4, 7, 8], [0, 5, 6, 7], [0, 5, 6, 8], [0, 5, 7, 8], [0, 6, 7, 8], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 3, 8], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 4, 8], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 5, 8], [1, 2, 6, 7], [1, 2, 6, 8], [1, 2, 7, 8], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 4, 8], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 5, 8], [1, 3, 6, 7], [1, 3, 6, 8], [1, 3, 7, 8], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 5, 8], [1, 4, 6, 7], [1, 4, 6, 8], [1, 4, 7, 8], [1, 5, 6, 7], [1, 5, 6, 8], [1, 5, 7, 8], [1, 6, 7, 8], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 4, 8], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 5, 8], [2, 3, 6, 7], [2, 3, 6, 8], [2, 3, 7, 8], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 5, 8], [2, 4, 6, 7], [2, 4, 6, 8], [2, 4, 7, 8], [2, 5, 6, 7], [2, 5, 6, 8], [2, 5, 7, 8], [2, 6, 7, 8], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 5, 8], [3, 4, 6, 7], [3, 4, 6, 8], [3, 4, 7, 8], [3, 5, 6, 7], [3, 5, 6, 8], [3, 5, 7, 8], [3, 6, 7, 8], [4, 5, 6, 7], [4, 5, 6, 8], [4, 5, 7, 8], [4, 6, 7, 8], [5, 6, 7, 8]]
	];
var LU_SUBS5= [
	null, 
	null, 
	null, 
	null, 
	null, 
	[[0, 1, 2, 3, 4]], 
	[[0, 1, 2, 3, 4], [0, 1, 2, 3, 5], [0, 1, 2, 4, 5], [0, 1, 3, 4, 5], [0, 2, 3, 4, 5], [1, 2, 3, 4, 5]], 
	[[0, 1, 2, 3, 4], [0, 1, 2, 3, 5], [0, 1, 2, 3, 6], [0, 1, 2, 4, 5], [0, 1, 2, 4, 6], [0, 1, 2, 5, 6], [0, 1, 3, 4, 5], [0, 1, 3, 4, 6], [0, 1, 3, 5, 6], [0, 1, 4, 5, 6], [0, 2, 3, 4, 5], [0, 2, 3, 4, 6], [0, 2, 3, 5, 6], [0, 2, 4, 5, 6], [0, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 6], [1, 2, 3, 5, 6], [1, 2, 4, 5, 6], [1, 3, 4, 5, 6], [2, 3, 4, 5, 6]], 
	[[0, 1, 2, 3, 4], [0, 1, 2, 3, 5], [0, 1, 2, 3, 6], [0, 1, 2, 3, 7], [0, 1, 2, 4, 5], [0, 1, 2, 4, 6], [0, 1, 2, 4, 7], [0, 1, 2, 5, 6], [0, 1, 2, 5, 7], [0, 1, 2, 6, 7], [0, 1, 3, 4, 5], [0, 1, 3, 4, 6], [0, 1, 3, 4, 7], [0, 1, 3, 5, 6], [0, 1, 3, 5, 7], [0, 1, 3, 6, 7], [0, 1, 4, 5, 6], [0, 1, 4, 5, 7], [0, 1, 4, 6, 7], [0, 1, 5, 6, 7], [0, 2, 3, 4, 5], [0, 2, 3, 4, 6], [0, 2, 3, 4, 7], [0, 2, 3, 5, 6], [0, 2, 3, 5, 7], [0, 2, 3, 6, 7], [0, 2, 4, 5, 6], [0, 2, 4, 5, 7], [0, 2, 4, 6, 7], [0, 2, 5, 6, 7], [0, 3, 4, 5, 6], [0, 3, 4, 5, 7], [0, 3, 4, 6, 7], [0, 3, 5, 6, 7], [0, 4, 5, 6, 7], [1, 2, 3, 4, 5], [1, 2, 3, 4, 6], [1, 2, 3, 4, 7], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], [1, 2, 3, 6, 7], [1, 2, 4, 5, 6], [1, 2, 4, 5, 7], [1, 2, 4, 6, 7], [1, 2, 5, 6, 7], [1, 3, 4, 5, 6], [1, 3, 4, 5, 7], [1, 3, 4, 6, 7], [1, 3, 5, 6, 7], [1, 4, 5, 6, 7], [2, 3, 4, 5, 6], [2, 3, 4, 5, 7], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [2, 4, 5, 6, 7], [3, 4, 5, 6, 7]], 
	[[0, 1, 2, 3, 4], [0, 1, 2, 3, 5], [0, 1, 2, 3, 6], [0, 1, 2, 3, 7], [0, 1, 2, 3, 8], [0, 1, 2, 4, 5], [0, 1, 2, 4, 6], [0, 1, 2, 4, 7], [0, 1, 2, 4, 8], [0, 1, 2, 5, 6], [0, 1, 2, 5, 7], [0, 1, 2, 5, 8], [0, 1, 2, 6, 7], [0, 1, 2, 6, 8], [0, 1, 2, 7, 8], [0, 1, 3, 4, 5], [0, 1, 3, 4, 6], [0, 1, 3, 4, 7], [0, 1, 3, 4, 8], [0, 1, 3, 5, 6], [0, 1, 3, 5, 7], [0, 1, 3, 5, 8], [0, 1, 3, 6, 7], [0, 1, 3, 6, 8], [0, 1, 3, 7, 8], [0, 1, 4, 5, 6], [0, 1, 4, 5, 7], [0, 1, 4, 5, 8], [0, 1, 4, 6, 7], [0, 1, 4, 6, 8], [0, 1, 4, 7, 8], [0, 1, 5, 6, 7], [0, 1, 5, 6, 8], [0, 1, 5, 7, 8], [0, 1, 6, 7, 8], [0, 2, 3, 4, 5], [0, 2, 3, 4, 6], [0, 2, 3, 4, 7], [0, 2, 3, 4, 8], [0, 2, 3, 5, 6], [0, 2, 3, 5, 7], [0, 2, 3, 5, 8], [0, 2, 3, 6, 7], [0, 2, 3, 6, 8], [0, 2, 3, 7, 8], [0, 2, 4, 5, 6], [0, 2, 4, 5, 7], [0, 2, 4, 5, 8], [0, 2, 4, 6, 7], [0, 2, 4, 6, 8], [0, 2, 4, 7, 8], [0, 2, 5, 6, 7], [0, 2, 5, 6, 8], [0, 2, 5, 7, 8], [0, 2, 6, 7, 8], [0, 3, 4, 5, 6], [0, 3, 4, 5, 7], [0, 3, 4, 5, 8], [0, 3, 4, 6, 7], [0, 3, 4, 6, 8], [0, 3, 4, 7, 8], [0, 3, 5, 6, 7], [0, 3, 5, 6, 8], [0, 3, 5, 7, 8], [0, 3, 6, 7, 8], [0, 4, 5, 6, 7], [0, 4, 5, 6, 8], [0, 4, 5, 7, 8], [0, 4, 6, 7, 8], [0, 5, 6, 7, 8], [1, 2, 3, 4, 5], [1, 2, 3, 4, 6], [1, 2, 3, 4, 7], [1, 2, 3, 4, 8], [1, 2, 3, 5, 6], [1, 2, 3, 5, 7], [1, 2, 3, 5, 8], [1, 2, 3, 6, 7], [1, 2, 3, 6, 8], [1, 2, 3, 7, 8], [1, 2, 4, 5, 6], [1, 2, 4, 5, 7], [1, 2, 4, 5, 8], [1, 2, 4, 6, 7], [1, 2, 4, 6, 8], [1, 2, 4, 7, 8], [1, 2, 5, 6, 7], [1, 2, 5, 6, 8], [1, 2, 5, 7, 8], [1, 2, 6, 7, 8], [1, 3, 4, 5, 6], [1, 3, 4, 5, 7], [1, 3, 4, 5, 8], [1, 3, 4, 6, 7], [1, 3, 4, 6, 8], [1, 3, 4, 7, 8], [1, 3, 5, 6, 7], [1, 3, 5, 6, 8], [1, 3, 5, 7, 8], [1, 3, 6, 7, 8], [1, 4, 5, 6, 7], [1, 4, 5, 6, 8], [1, 4, 5, 7, 8], [1, 4, 6, 7, 8], [1, 5, 6, 7, 8], [2, 3, 4, 5, 6], [2, 3, 4, 5, 7], [2, 3, 4, 5, 8], [2, 3, 4, 6, 7], [2, 3, 4, 6, 8], [2, 3, 4, 7, 8], [2, 3, 5, 6, 7], [2, 3, 5, 6, 8], [2, 3, 5, 7, 8], [2, 3, 6, 7, 8], [2, 4, 5, 6, 7], [2, 4, 5, 6, 8], [2, 4, 5, 7, 8], [2, 4, 6, 7, 8], [2, 5, 6, 7, 8], [3, 4, 5, 6, 7], [3, 4, 5, 6, 8], [3, 4, 5, 7, 8], [3, 4, 6, 7, 8], [3, 5, 6, 7, 8], [4, 5, 6, 7, 8]]
	];
var LU_SUBS6= [
	null, 
	null, 
	null, 
	null, 
	null, 
	null, 
	[[0, 1, 2, 3, 4, 5]], 
	[[0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 6], [0, 1, 2, 3, 5, 6], [0, 1, 2, 4, 5, 6], [0, 1, 3, 4, 5, 6], [0, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 
	[[0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 6], [0, 1, 2, 3, 4, 7], [0, 1, 2, 3, 5, 6], [0, 1, 2, 3, 5, 7], [0, 1, 2, 3, 6, 7], [0, 1, 2, 4, 5, 6], [0, 1, 2, 4, 5, 7], [0, 1, 2, 4, 6, 7], [0, 1, 2, 5, 6, 7], [0, 1, 3, 4, 5, 6], [0, 1, 3, 4, 5, 7], [0, 1, 3, 4, 6, 7], [0, 1, 3, 5, 6, 7], [0, 1, 4, 5, 6, 7], [0, 2, 3, 4, 5, 6], [0, 2, 3, 4, 5, 7], [0, 2, 3, 4, 6, 7], [0, 2, 3, 5, 6, 7], [0, 2, 4, 5, 6, 7], [0, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7], [1, 2, 3, 4, 6, 7], [1, 2, 3, 5, 6, 7], [1, 2, 4, 5, 6, 7], [1, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7]], 
	[[0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 6], [0, 1, 2, 3, 4, 7], [0, 1, 2, 3, 4, 8], [0, 1, 2, 3, 5, 6], [0, 1, 2, 3, 5, 7], [0, 1, 2, 3, 5, 8], [0, 1, 2, 3, 6, 7], [0, 1, 2, 3, 6, 8], [0, 1, 2, 3, 7, 8], [0, 1, 2, 4, 5, 6], [0, 1, 2, 4, 5, 7], [0, 1, 2, 4, 5, 8], [0, 1, 2, 4, 6, 7], [0, 1, 2, 4, 6, 8], [0, 1, 2, 4, 7, 8], [0, 1, 2, 5, 6, 7], [0, 1, 2, 5, 6, 8], [0, 1, 2, 5, 7, 8], [0, 1, 2, 6, 7, 8], [0, 1, 3, 4, 5, 6], [0, 1, 3, 4, 5, 7], [0, 1, 3, 4, 5, 8], [0, 1, 3, 4, 6, 7], [0, 1, 3, 4, 6, 8], [0, 1, 3, 4, 7, 8], [0, 1, 3, 5, 6, 7], [0, 1, 3, 5, 6, 8], [0, 1, 3, 5, 7, 8], [0, 1, 3, 6, 7, 8], [0, 1, 4, 5, 6, 7], [0, 1, 4, 5, 6, 8], [0, 1, 4, 5, 7, 8], [0, 1, 4, 6, 7, 8], [0, 1, 5, 6, 7, 8], [0, 2, 3, 4, 5, 6], [0, 2, 3, 4, 5, 7], [0, 2, 3, 4, 5, 8], [0, 2, 3, 4, 6, 7], [0, 2, 3, 4, 6, 8], [0, 2, 3, 4, 7, 8], [0, 2, 3, 5, 6, 7], [0, 2, 3, 5, 6, 8], [0, 2, 3, 5, 7, 8], [0, 2, 3, 6, 7, 8], [0, 2, 4, 5, 6, 7], [0, 2, 4, 5, 6, 8], [0, 2, 4, 5, 7, 8], [0, 2, 4, 6, 7, 8], [0, 2, 5, 6, 7, 8], [0, 3, 4, 5, 6, 7], [0, 3, 4, 5, 6, 8], [0, 3, 4, 5, 7, 8], [0, 3, 4, 6, 7, 8], [0, 3, 5, 6, 7, 8], [0, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7], [1, 2, 3, 4, 5, 8], [1, 2, 3, 4, 6, 7], [1, 2, 3, 4, 6, 8], [1, 2, 3, 4, 7, 8], [1, 2, 3, 5, 6, 7], [1, 2, 3, 5, 6, 8], [1, 2, 3, 5, 7, 8], [1, 2, 3, 6, 7, 8], [1, 2, 4, 5, 6, 7], [1, 2, 4, 5, 6, 8], [1, 2, 4, 5, 7, 8], [1, 2, 4, 6, 7, 8], [1, 2, 5, 6, 7, 8], [1, 3, 4, 5, 6, 7], [1, 3, 4, 5, 6, 8], [1, 3, 4, 5, 7, 8], [1, 3, 4, 6, 7, 8], [1, 3, 5, 6, 7, 8], [1, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 8], [2, 3, 4, 5, 7, 8], [2, 3, 4, 6, 7, 8], [2, 3, 5, 6, 7, 8], [2, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8]]
	];

/* ***********************************************
	State class
*********************************************** */
function State(iAd, iValue){
	this.ad = iAd;
	this.value = iValue;
	return this;
}

State.prototype.adstr = function(){
	return _adstr(this.ad);
}

function Candi(iAd, iData){
	this.ad = iAd;
	this.candi = iData;
	return this;
}

Candi.prototype.adstr = function(){
	return _adstr(this.ad);
}

Candi.prototype.candi = function(){
	return _candi(this.candi);
}

Candi.prototype.candistr = function(){
	return _candistr(this.candi);
}

Candi.prototype.toString = function(){
	return (_candistr(this.candi) + "@" + _adstr(this.ad));
}

/* ***********************************************
	Strategy : Validity Check
*********************************************** */
var oStgValidityCheck = new NodeObject();

oStgValidityCheck.onsolverequest = function(oSr){
	var oPz = oSr.puzzle;
	var oUr = new UpdateRequest(UR_NONE, oPz);
	
	var bSolved = true; 
	var aCrashed = [];
	var iDcCount = 0; // Count for determined cells
	var iPtr = 0, iValue = 0;
	validity_loop :
	for (var iAd = 0; SDK_SIZE > iAd; iAd++){
		iValue = oPz.cell[iAd].value;
		// If there is an undetermined cell, it is not solved.
		if ((! iValue) || (oPz.data[iAd] & 1) == 0){
			bSolved = false;
			continue;
		}
		iDcCount++;
		for (iPtr = 0; SDK_LEN_FT_BASIC > iPtr; iPtr++){
			// If two cells with common value can see each other, it is invalid.
			if (oPz.cell[LU_FT_BASIC[iAd][iPtr]].value == iValue){
				aCrashed.push(new State(iAd, iValue));
				continue validity_loop;
			}
		}
	}
	
	if (aCrashed.length){
		oUr.type = UR_CRASH;
		oUr.crashed = aCrashed;
	}
	else if (bSolved){
		oUr.type = UR_SOLVED;
	}
	else if (iDcCount < 17){
		oUr.type = UR_NO_16_THM;
		oUr.clueCount = iDcCount;
	}
	this.parent.updaterequest(oUr, oPz);
	return false;
};

/* ***********************************************
	Strategy : Obvious Candidate Removal 
*********************************************** */
var oStgElimObvious = new NodeObject();

oStgElimObvious.onsolverequest = function(oSr){
	var oPz = oSr.puzzle;
	var oUr = new UpdateRequest(UR_NONE, oPz);
	
	var aRemoved = [];
	var iValue = 0, iFt = 0, iFtComp = 0, iPtr = 0, iAd2 = 0;
	for (var iAd = 0; SDK_SIZE > iAd; iAd++){
		iValue = oPz.cell[iAd].value;
		// Is not determined, pass this cell
		if (! iValue){
			oPz.data[iAd] &= CS_TOTAL;
			continue;
		}
		if ((oPz.data[iAd] & 1) == 0){
			continue;
		}
		// Otherwise, perform candidate elimination
		iFt = 1 << iValue;
		iFtComp = ~iFt;
		for (iPtr = 0; SDK_LEN_FT_BASIC > iPtr; iPtr++){
			iAd2 = LU_FT_BASIC[iAd][iPtr];
			if (iFt & oPz.data[iAd2]){
				aRemoved.push(new State(iAd2, iValue));
			}
		}
	}
	if (aRemoved.length){
		oUr.type = UR_OBVIOUS;
		oUr.removed = aRemoved;
		oUr.action = this.actionRemove;
		oUr.forceAction = true;
	}
	this.parent.updaterequest(oUr, oPz);
	return false;
};

oStgElimObvious.actionRemove = function(){
	var oPz = this.puzzle;
	var oRemoved = null;
	for (var iN = 0; this.removed.length > iN; iN++){
		oRemoved = this.removed[iN];
		oPz.data[oRemoved.ad] &= ~(1 << oRemoved.value);
	}
	for (var iAd = 0; SDK_SIZE > iAd; iAd++){
		oPz.cell[iAd].update(true);
	}
};

/* ***********************************************
	Strategy : Naked Single 
*********************************************** */
var oStgNakedSingle = new NodeObject();

oStgNakedSingle.onsolverequest = function(oSr){
	var oPz = oSr.puzzle;
	var oUr = new UpdateRequest(UR_NONE, oPz);
	
	var aDetermined = [];
	var iValue = 0;
	for (var iAd = 0; SDK_SIZE > iAd; iAd++){
		iValue = _value(oPz.data[iAd]);
		if (iValue && ((oPz.data[iAd] & 1) == 0)){
			aDetermined.push(new State(iAd, iValue));
		}
	}
	if (aDetermined.length){
		oUr.type = UR_NAKED1;
		oUr.determined = aDetermined;
		oUr.action = this.actionDetermine;
		oUr.forceAction = true;
	}
	this.parent.updaterequest(oUr);
	return false;
};

oStgNakedSingle.actionDetermine = function(){
	var oPz = this.puzzle;
	var oDetermined = null;
	for (var iN = 0; this.determined.length > iN; iN++){
		oDetermined = this.determined[iN];
		oPz.data[oDetermined.ad] = 1 | (1 << oDetermined.value);
	}
};

/* ***********************************************
	Strategy : Hidden Single 
*********************************************** */
var oStgHiddenSingle = new NodeObject();

oStgHiddenSingle.onsolverequest = function(oSr){
	var oPz = oSr.puzzle;
	var oUr = new UpdateRequest(UR_NONE, oPz);
	
	var apLu = null;
	var iAd = 0;
	var iAdHidden = 0;
	var iFt = 0;
	var aDetermined = [];
	// Loop for Key Value
	for (var iValue = 1; SDK_ORDER >= iValue; iValue++){
		iFt = 1 << iValue;
		// Loop for mode : row / column / box
		for (var iMode = 0; 3 > iMode; iMode++){
			// Loop for each logical unit in the given mod
			loop_lu :
			for (var iPtrLu = 0; SDK_ORDER > iPtrLu; iPtrLu++){
				switch (iMode){
					case 0 :
					apLu = LU_ROW_DATA[iPtrLu];
					break;
					case 1 :
					apLu = LU_COL_DATA[iPtrLu];
					break;
					case 2 :
					apLu = LU_BOX_DATA[iPtrLu];
					break;
				}
				// Inspect hidden single
				iAdHidden = -1;
				for (var iPtr = 0; SDK_ORDER > iPtr; iPtr++){
					iAd = apLu[iPtr];
					if (oPz.data[iAd] & iFt){
						if (oPz.cell[iAd].size == 1){
							continue loop_lu;
						}
						else if (iAdHidden >= 0){
							continue loop_lu;
						}
						else {
							iAdHidden = iAd;
						}
					}
				} // End of Loop : hidden single
				
				if (iAdHidden >= 0){
					var bExists = false;
					for (var iN = 0; aDetermined.length > iN; iN++){
						if (aDetermined[iN].state.ad == iAdHidden && aDetermined[iN].state.value == iValue){
							bExists = true;
							aDetermined[iN].basis.push({ mode : iMode, pointer : iPtrLu });
							break;
						}
					}
					if (!bExists){
						aDetermined.push({
							basis : [{ mode : iMode, pointer : iPtrLu }], 
							state : new State(iAdHidden, iValue), 
							candi : new Candi(iAdHidden, oPz.data[iAdHidden] & ~(1 << iValue))
						});
					}
				}
			} // End of Loop : logical unit
		} // End of Loop : mode
	} // End of Loop : key value
	
	if (aDetermined.length){
		oUr.type = UR_HIDDEN1;
		oUr.determined = aDetermined;
		oUr.action = this.actionDetermine;
	}
	this.parent.updaterequest(oUr);
	return false;
};

oStgHiddenSingle.actionDetermine = function(){
	var oPz = this.puzzle;
	var oDetermined = null;
	for (var iN = 0; this.determined.length > iN; iN++){
		oDetermined = this.determined[iN].state;
		oPz.data[oDetermined.ad] = 1 | (1 << oDetermined.value);
		oPz.cell[oDetermined.ad].update(true);
	}
};

/* ***********************************************
	Strategy : Naked Subset 
*********************************************** */
var oStgNakedSet = new NodeObject();

oStgNakedSet.onsolverequest = function(oSr){
	var oPz = oSr.puzzle;
	var oUr = new UpdateRequest(UR_NONE, oPz);
	var iSetSize = oUr.setSize || this.setSize;
	var aMsgs = [];

	// Loop for mode : row / column / box
	for (var iMode = 0; 3 > iMode; iMode++){
		// Loop for each logical unit in the given mod
		for (var iPtrLu = 0; SDK_ORDER > iPtrLu; iPtrLu++){
			var apLu;
			switch (iMode){
			case 0 :
				apLu = LU_ROW_DATA[iPtrLu];
				break;
			case 1 :
				apLu = LU_COL_DATA[iPtrLu];
				break;
			case 2 :
				apLu = LU_BOX_DATA[iPtrLu];
				break;
			}
			// Create a list of n-sets
			var aListSets = [];
			for (var iPtr = 0; SDK_ORDER > iPtr; iPtr++){
				var iAd = apLu[iPtr];
				if (oPz.cell[iAd].size > 1 && oPz.cell[iAd].size <= iSetSize){
					aListSets.push(iAd);
				}
			}
			var iListSize = aListSets.length;
			if (iListSize < iSetSize){
				continue;
			}
			var aSubs;
			switch (iSetSize){
			case 2:
				aSubs = LU_SUBS2[iListSize];
				break;
			case 3:
				aSubs = LU_SUBS3[iListSize];
				break;
			case 4:
				aSubs = LU_SUBS4[iListSize];
				break;
			}
			// Perform check
			var iFt = 0, iFtCommon = 0;
			var iAd1 = 0, iAd2 = 0, iAd3 = 0, iAd4 = 0;
			for (var iPptr = 0; aSubs.length > iPptr; iPptr++){
				var iFt = oPz.data[iAd1 = aListSets[aSubs[iPptr][0]]];
				if (iSetSize > 1){
					iFt |= oPz.data[iAd2 = aListSets[aSubs[iPptr][1]]];
				}
				if (iSetSize > 2){
					iFt |= oPz.data[iAd3 = aListSets[aSubs[iPptr][2]]];
				}
				if (iSetSize > 3){
					iFt |= oPz.data[iAd4 = aListSets[aSubs[iPptr][3]]];
				}
				if (_size(iFt) > iSetSize){
					continue;
				}
				// If a naked subset of order n is formed,
				var aRemoved = [];
				for (var iPtr = 0; SDK_ORDER > iPtr; iPtr++){
					// Avoid self-referencing
					var iAd = apLu[iPtr];
					if (iAd == iAd1){
						continue;
					}
					else if (iSetSize > 1 && iAd == iAd2){
						continue;
					}
					else if (iSetSize > 2 && iAd == iAd3){
						continue;
					}
					else if (iSetSize > 3 && iAd == iAd4){
						continue;
					}
					// if the cell shares a common candidate with the n-subset
					if (iFtCommon = iFt & oPz.data[iAd]){
						aRemoved.push(new Candi(iAd, iFtCommon));
					}
				} // End of Loop : elimination
				// Add to message list
				if (aRemoved.length){
					var oBasis = { mode : iMode, pointer : iPtrLu };
					var bExists = false;
					var aCandi = [new Candi(iAd1, oPz.data[iAd1])];
					if (iSetSize > 1){
						aCandi.push(new Candi(iAd2, oPz.data[iAd2]));
					}
					if (iSetSize > 2){
						aCandi.push(new Candi(iAd3, oPz.data[iAd3]));
					}
					if (iSetSize > 3){
						aCandi.push(new Candi(iAd4, oPz.data[iAd4]));
					}
					for (var iM = 0; aMsgs.length > iM; iM++){
						if (aMsgs[iM].candi[0].ad != iAd1){
							continue;
						}
						else if (iSetSize > 1 && aMsgs[iM].candi[1].ad != iAd2){
							continue;
						}
						else if (iSetSize > 2 && aMsgs[iM].candi[2].ad != iAd3){
							continue;
						}
						else if (iSetSize > 3 && aMsgs[iM].candi[3].ad != iAd4){
							continue;
						}
						else {
							bExists = true;
							aMsgs[iM].basis.push(oBasis);
							add_next :
							for (var iL = 0; aRemoved.length > iL; iL++){
								for (var iK = 0; aMsgs[iM].removed.length > iK; iK++){
									if (aRemoved[iL].ad == aMsgs[iM].removed[iK].ad){
										continue add_next;
									}
								}
								aMsgs[iM].removed.push(aRemoved[iL]);
							}
							break;
						}
					}
					if (!bExists){
						aMsgs.push({
							basis : [oBasis], 
							candi : aCandi,
							filter : iFt,
							removed : aRemoved
						});
					}
				} // End of Loop : message list
			} // End of Loop : check for each n-group 
		} // End of Loop : logical unit
	} // End of Loop : mode

	if (aMsgs.length){
		switch (iSetSize){
		case 2:
			oUr.type = UR_NAKED2;
			break;
		case 3:
			oUr.type = UR_NAKED3;
			break;
		case 4:
			oUr.type = UR_NAKED4;
			break;
		}
		oUr.setSize = iSetSize;
		oUr.messages = aMsgs;
		oUr.action = this.actionDetermine;
	}
	this.parent.updaterequest(oUr);
	return false;
};

oStgNakedSet.actionDetermine = function(){
	var oPz = this.puzzle;
	var aRemoved;
	for (var iN = 0; this.messages.length > iN; iN++){
		aRemoved = this.messages[iN].removed;
		for (var iM = 0; aRemoved.length > iM; iM++){
			oPz.data[aRemoved[iM].ad] &= ~aRemoved[iM].candi;
			oPz.cell[aRemoved[iM].ad].update(true);
		}
	}
};

var oStgNakedPair = new NodeObject();
oStgNakedPair.setSize = 2;
oStgNakedPair.onsolverequest = oStgNakedSet.onsolverequest;
oStgNakedPair.actionDetermine = oStgNakedSet.actionDetermine;

var oStgNakedTriple = new NodeObject();
oStgNakedTriple.setSize = 3;
oStgNakedTriple.onsolverequest = oStgNakedSet.onsolverequest;
oStgNakedTriple.actionDetermine = oStgNakedSet.actionDetermine;

var oStgNakedQuadraple = new NodeObject();
oStgNakedQuadraple.setSize = 4;
oStgNakedQuadraple.onsolverequest = oStgNakedSet.onsolverequest;
oStgNakedQuadraple.actionDetermine = oStgNakedSet.actionDetermine;

/* ***********************************************
	Strategy : Hidden Pair 
*********************************************** */
var oStgHiddenPair = new NodeObject();

oStgHiddenPair.onsolverequest = function(oSr){
	var oPz = oSr.puzzle;
	var oUr = new UpdateRequest(UR_NONE, oPz);
	var aMsgs = [];

	// Loop for Key Value
	for (var iValue1 = 1; SDK_ORDER >= iValue1; iValue1++){
		// Loop for Key Value 2
		for (var iValue2 = 1; SDK_ORDER >= iValue2; iValue2++){
			if (iValue1 == iValue2){
				continue;
			}
			var iFt = (1 << iValue1) | (1 << iValue2);
			// Loop for mode : row / column / box
			for (var iMode = 0; 3 > iMode; iMode++){
				// Loop for each logical unit in the given mod
				loop_lu :
				for (var iPtrLu = 0; SDK_ORDER > iPtrLu; iPtrLu++){
					var apLu;
					switch (iMode){
						case 0 :
						apLu = LU_ROW_DATA[iPtrLu];
						break;
						case 1 :
						apLu = LU_COL_DATA[iPtrLu];
						break;
						case 2 :
						apLu = LU_BOX_DATA[iPtrLu];
						break;
					}
					// Inspect hidden single
					var aiAdHidden = [];
					for (var iPtr = 0; SDK_ORDER > iPtr; iPtr++){
						var iAd = apLu[iPtr];
						if (oPz.data[iAd] & iFt){
							if (oPz.cell[iAd].size == 1){
								continue loop_lu;
							}
							else if (aiAdHidden.length == 2){
								continue loop_lu;
							}
							else {
								aiAdHidden.push(iAd);
							}
						}
					} // End of Loop : hidden single
					
					if (aiAdHidden.length == 2){
						var oMsg = {
							basis : [{ mode : iMode, pointer : iPtrLu }], 
							filter : iFt, 
							candi1 : new Candi(aiAdHidden[0], iFt),
							candi2 : new Candi(aiAdHidden[1], iFt),
							removed : []
						};
						var iElimCandi0 = oPz.data[aiAdHidden[0]] & ~iFt;
						var iElimCandi1 = oPz.data[aiAdHidden[1]] & ~iFt;
						if (iElimCandi0){
							oMsg.removed.push(new Candi(aiAdHidden[0], iElimCandi0));
						}
						if (iElimCandi1){
							oMsg.removed.push(new Candi(aiAdHidden[1], iElimCandi1));
						}
						if (oMsg.removed.length){
							var bExists = false;
							for (var iM = 0; aMsgs.length > iM; iM++){
								if (aMsgs[iM].candi1.ad == aiAdHidden[0]
									&& aMsgs[iM].candi2.ad == aiAdHidden[1]){
									bExists = true;
									aMsgs[iM].basis.push(oMsg.basis[0]);
									add_next :
									for (var iL = 0; oMsg.removed.length > iL; iL++){
										for (var iK = 0; aMsgs[iM].removed.length > iK; iK++){
											if (oMsg.removed[iL].ad == aMsgs[iM].removed[iK].ad){
												continue add_next;
											}
										}
										aMsgs[iM].removed.push(oMsg.removed[iL]);
									}
									break;
								}
							}
							if (!bExists){
								aMsgs.push(oMsg);
							}
						}
					}
				} // End of Loop : logical unit
			} // End of Loop : mode
		} // End of Loop : key value 2
	} // End of Loop : key value 1

	if (aMsgs.length){
		oUr.type = UR_HIDDEN2;
		oUr.messages = aMsgs;
		oUr.action = this.actionDetermine;
	}
	this.parent.updaterequest(oUr);
	return false;
};

oStgHiddenPair.actionDetermine = function(){
	var oPz = this.puzzle;
	var aRemoved;
	for (var iN = 0; this.messages.length > iN; iN++){
		aRemoved = this.messages[iN].removed;
		for (var iM = 0; aRemoved.length > iM; iM++){
			oPz.data[aRemoved[iM].ad] &= ~aRemoved[iM].candi;
			oPz.cell[aRemoved[iM].ad].update(true);
		}
	}
};

/* ***********************************************
	Strategy : Hidden Triple 
*********************************************** */
var oStgHiddenTriple = new NodeObject();

oStgHiddenTriple.onsolverequest = function(oSr){
	var oPz = oSr.puzzle;
	var oUr = new UpdateRequest(UR_NONE, oPz);
	var aMsgs = [];

	// Loop for Key Value
	for (var iValue1 = 1; SDK_ORDER >= iValue1; iValue1++){
		// Loop for Key Value 2
		for (var iValue2 = 1; SDK_ORDER >= iValue2; iValue2++){
			if (iValue1 == iValue2){
				continue;
			}
			// Loop for Key Value 3
			for (var iValue3 = 1; SDK_ORDER >= iValue3; iValue3++){
				if (iValue1 == iValue3 || iValue2 == iValue3){
					continue;
				}
				var iFt = (1 << iValue1) | (1 << iValue2) | (1 << iValue3);
				// Loop for mode : row / column / box
				for (var iMode = 0; 3 > iMode; iMode++){
					// Loop for each logical unit in the given mod
					loop_lu :
					for (var iPtrLu = 0; SDK_ORDER > iPtrLu; iPtrLu++){
						var apLu;
						switch (iMode){
							case 0 :
							apLu = LU_ROW_DATA[iPtrLu];
							break;
							case 1 :
							apLu = LU_COL_DATA[iPtrLu];
							break;
							case 2 :
							apLu = LU_BOX_DATA[iPtrLu];
							break;
						}
						// Inspect hidden single
						var aiAdHidden = [];
						for (var iPtr = 0; SDK_ORDER > iPtr; iPtr++){
							var iAd = apLu[iPtr];
							if (oPz.data[iAd] & iFt){
								if (oPz.cell[iAd].size == 1){
									continue loop_lu;
								}
								else if (aiAdHidden.length == 3){
									continue loop_lu;
								}
								else {
									aiAdHidden.push(iAd);
								}
							}
						} // End of Loop : hidden single
						
						if (aiAdHidden.length == 3){
							var oMsg = {
								basis : [{ mode : iMode, pointer : iPtrLu }], 
								filter : iFt, 
								candi1 : new Candi(aiAdHidden[0], iFt),
								candi2 : new Candi(aiAdHidden[1], iFt),
								candi3 : new Candi(aiAdHidden[2], iFt),
								removed : []
							};
							var iElimCandi0 = oPz.data[aiAdHidden[0]] & ~iFt;
							var iElimCandi1 = oPz.data[aiAdHidden[1]] & ~iFt;
							var iElimCandi2 = oPz.data[aiAdHidden[2]] & ~iFt;
							if (iElimCandi0){
								oMsg.removed.push(new Candi(aiAdHidden[0], iElimCandi0));
							}
							if (iElimCandi1){
								oMsg.removed.push(new Candi(aiAdHidden[1], iElimCandi1));
							}
							if (iElimCandi2){
								oMsg.removed.push(new Candi(aiAdHidden[2], iElimCandi2));
							}
							if (oMsg.removed.length){
								var bExists = false;
								for (var iM = 0; aMsgs.length > iM; iM++){
									if (aMsgs[iM].candi1.ad == aiAdHidden[0]
										&& aMsgs[iM].candi2.ad == aiAdHidden[1]
										&& aMsgs[iM].candi3.ad == aiAdHidden[2]){
										bExists = true;
										aMsgs[iM].basis.push(oMsg.basis[0]);
										add_next :
										for (var iL = 0; oMsg.removed.length > iL; iL++){
											for (var iK = 0; aMsgs[iM].removed.length > iK; iK++){
												if (oMsg.removed[iL].ad == aMsgs[iM].removed[iK].ad){
													continue add_next;
												}
											}
											aMsgs[iM].removed.push(oMsg.removed[iL]);
										}
										break;
									}
								}
								if (!bExists){
									aMsgs.push(oMsg);
								}
							}
						}
					} // End of Loop : logical unit
				} // End of Loop : mode
		}	 // End of Loop : key value 3
		} // End of Loop : key value 2
	} // End of Loop : key value 1

	if (aMsgs.length){
		oUr.type = UR_HIDDEN3;
		oUr.messages = aMsgs;
		oUr.action = this.actionDetermine;
	}
	this.parent.updaterequest(oUr);
	return false;
};

oStgHiddenTriple.actionDetermine = function(){
	var oPz = this.puzzle;
	var aRemoved;
	for (var iN = 0; this.messages.length > iN; iN++){
		aRemoved = this.messages[iN].removed;
		for (var iM = 0; aRemoved.length > iM; iM++){
			oPz.data[aRemoved[iM].ad] &= ~aRemoved[iM].candi;
			oPz.cell[aRemoved[iM].ad].update(true);
		}
	}
};

/* ***********************************************
	Strategy : Intersection Lock 
*********************************************** */
var oStgIntersectionLock = new NodeObject();

oStgIntersectionLock.onsolverequest = function(oSr){
	var oPz = oSr.puzzle;
	var oUr = new UpdateRequest(UR_NONE, oPz);
	var oMsg = null;
	
	var iFt = 0, iFt0 = 0, iFt1 = 0, iFtTmp = 0, iFtElem = 0;
	var iFtComp0 = 0, iFtComp1 = 0;
	var iAd = 0;
	var apLu = null;
	main_loop :
	for (var iMode = 0; 2 > iMode; iMode++){
		for (var iPtrLu = 0; SDK_SUBSIZE > iPtrLu; iPtrLu++){
			switch (iMode){
				case 0 :
				apLu = LU_FT_ROW_TRIAD[iPtrLu];
				break;
				case 1 :
				apLu = LU_FT_COL_TRIAD[iPtrLu];
				break;
			}
			iFt0 = 0;
			iFt1 = 0;
			for (var iPtr = 0; SDK_LEN_FT_LOCK > iPtr; iPtr++){
				iFt0 |= oPz.data[apLu[0][iPtr]];
				iFt1 |= oPz.data[apLu[1][iPtr]];
			} // End of filter-creatiion
			iFt = iFt0 & iFt1 & CS_TOTAL;
			iFtComp0 = CS_TOTAL & iFt0 & ~iFt;
			iFtComp1 = CS_TOTAL & iFt1 & ~iFt;

			// Pointing Pairs : Box to Row|Col elimination check
			if (iFtComp0){
				oMsg = {
					type : "pointing",
					candi : 0, 
					basis : [],
					removed : []
					};
				iFtElem = 0;
				for (var iPtr = 0; SDK_LEN_FT_LOCK > iPtr; iPtr++){
					iAd = apLu[0][iPtr];
					if (iFtTmp = oPz.data[iAd] & iFtComp0){
						oMsg.removed.push(new Candi(iAd, iFtTmp));
						iFtElem |= iFtTmp;
					}
				}
				oMsg.candi = iFtElem;
				for (var iPtr = 0; SDK_DEGREE > iPtr; iPtr++){
					iAd = apLu[2][iPtr];
					// if (iFtTmp = oPz.data[iAd] & iFtElem){
						iFtTmp = oPz.data[iAd] & iFtElem
						oMsg.basis.push(new Candi(iAd, iFtTmp));
					// }
				}
				break main_loop;
			}
			// Box Reduction : Row|Col to Box elimination check
			if (iFtComp1){
				oMsg = {
					type : "box",
					candi : 0, 
					basis : [],
					removed : []
					};
				iFtElem = 0;
				for (var iPtr = 0; SDK_LEN_FT_LOCK > iPtr; iPtr++){
					iAd = apLu[1][iPtr];
					if (iFtTmp = oPz.data[iAd] & iFtComp1){
						oMsg.removed.push(new Candi(iAd, iFtTmp));
						iFtElem |= iFtTmp;
					}
				}
				oMsg.candi = iFtElem;
				for (var iPtr = 0; SDK_DEGREE > iPtr; iPtr++){
					iAd = apLu[2][iPtr];
					// if (iFtTmp = oPz.data[iAd] & iFtElem){
						iFtTmp = oPz.data[iAd] & iFtElem
						oMsg.basis.push(new Candi(iAd, iFtTmp));
					// }
				}
				break main_loop;
			}
			oMsg = null;
		} // End of Loop : logical unit
	} // End of Loop : mode

	if (oMsg){
		oUr.type = UR_INTER_LOCK;
		oUr.message = oMsg;
		oUr.action = this.actionDetermine;
	}
	this.parent.updaterequest(oUr);
	return false;
}

oStgIntersectionLock.actionDetermine = function(){
	var oPz = this.puzzle;
	var aRemoved;
	aRemoved = this.message.removed;
	for (var iM = 0; aRemoved.length > iM; iM++){
		oPz.data[aRemoved[iM].ad] &= ~aRemoved[iM].candi;
		oPz.cell[aRemoved[iM].ad].update(true);
	}
};

/* ***********************************************
	Strategy : Fish 
*********************************************** */
var oStgFish = new NodeObject();

oStgFish.onsolverequest = function(oSr){
	var oPz = oSr.puzzle;
	var oUr = new UpdateRequest(UR_NONE, oPz);
	var iSetSize = oUr.setSize || this.setSize;
	var oMsg = null;

	// Loop for mode : row / column
	main_loop :
	for (var iMode = 0; 2 > iMode; iMode++){
		// Loop for each value
		for (var iValue = 1; SDK_ORDER >= iValue; iValue++){
			var iFt = 1 << iValue;
			// Create a list of simple-colored LU
			var aRef, aPerpRef;
			switch (iMode){
			case 0 :
				aRef = LU_ROW_DATA;
				aPerpRef = LU_COL_DATA;
				break;
			case 1:
				aRef = LU_COL_DATA;
				aPerpRef = LU_ROW_DATA;
				break;
			}
			var aSimpleLu = [];
			for (var iPtrLu = 0; SDK_ORDER > iPtrLu; iPtrLu++){
				var iCount = 0;
				var iData = 0;
				for (var iPtr = 0; SDK_ORDER > iPtr; iPtr++){
					if (oPz.data[aRef[iPtrLu][iPtr]] & iFt){
						iCount++;
						iData |= (1 << iPtr);
					}
				}
				if (iCount > 1 && iCount <= iSetSize){
					aSimpleLu.push({ pointer : iPtrLu, data : iData });
				}
			}
			var iListSize = aSimpleLu.length;
			if (iListSize < iSetSize){
				continue;
			}
			var aSubs;
			switch (iSetSize){
			case 2:
				aSubs = LU_SUBS2[iListSize];
				break;
			case 3:
				aSubs = LU_SUBS3[iListSize];
				break;
			case 4:
				aSubs = LU_SUBS4[iListSize];
				break;
			case 5:
				aSubs = LU_SUBS5[iListSize];
				break;
			}
			// Perform check
			var iData = 0;
			for (var iPptr = 0; aSubs.length > iPptr; iPptr++){
				var aBasisPtrs = [];
				var iData = aSimpleLu[aSubs[iPptr][0]].data;
				aBasisPtrs.push(aSimpleLu[aSubs[iPptr][0]].pointer);
				if (iSetSize > 1){
					iData |= aSimpleLu[aSubs[iPptr][1]].data;
					aBasisPtrs.push(aSimpleLu[aSubs[iPptr][1]].pointer);
				}
				if (iSetSize > 2){
					iData |= aSimpleLu[aSubs[iPptr][2]].data;
					aBasisPtrs.push(aSimpleLu[aSubs[iPptr][2]].pointer);
				}
				if (iSetSize > 3){
					iData |= aSimpleLu[aSubs[iPptr][3]].data;
					aBasisPtrs.push(aSimpleLu[aSubs[iPptr][3]].pointer);
				}
				if (iSetSize > 4){
					iData |= aSimpleLu[aSubs[iPptr][4]].data;
					aBasisPtrs.push(aSimpleLu[aSubs[iPptr][4]].pointer);
				}
				if (_size(iData << 1) > iSetSize){
					continue;
				}
				// If a naked subset of order n is formed,
				// Create a pointer for perpendicualr LUs
				var aPtrs = [];
				for (var iPtr = 0; SDK_ORDER > iPtr; iPtr++){
					if (iData & (1 << iPtr)){
						aPtrs.push(iPtr);
					}
				}
				// Loop for each perpendicular LU
				var aBasis = [];
				var aRemoved = [];
				for (var iPptr2 = 0; aPtrs.length > iPptr2; iPptr2++){
					// Loop for each parallel cross
					for (var iPtrLu = 0; SDK_ORDER > iPtrLu; iPtrLu++){
						var iAd = aPerpRef[aPtrs[iPptr2]][iPtrLu];
						var iFtRes = iFt & oPz.data[iAd];
						if (iPtrLu == aSimpleLu[aSubs[iPptr][0]].pointer
							|| (iSetSize > 1 && iPtrLu == aSimpleLu[aSubs[iPptr][1]].pointer)
							|| (iSetSize > 2 && iPtrLu == aSimpleLu[aSubs[iPptr][2]].pointer)
							|| (iSetSize > 3 && iPtrLu == aSimpleLu[aSubs[iPptr][3]].pointer)
							|| (iSetSize > 4 && iPtrLu == aSimpleLu[aSubs[iPptr][4]].pointer)
							){
							aBasis.push(new Candi(iAd, iFtRes));
							continue;
						}
						// Remove the wing!
						if (iFtRes){
							aRemoved.push(new Candi(iAd, iFtRes));
						}
					}
				} // End of Loop : perpendicular LU
				if (aRemoved.length){
					oMsg = {
						mode : iMode,
						value : iValue,
						basis : aBasis,
						basisPointer : aBasisPtrs,
						pointer : aPtrs,
						removed : aRemoved
					};
					break main_loop;
				}
			} // End of Loop : check
		} // End of Loop : Value
	} // End of Loop : mode

	if (oMsg){
		switch (iSetSize){
		case 2:
			oUr.type = UR_XWING;
			break;
		case 3:
			oUr.type = UR_SWORDFISH;
			break;
		case 4:
			oUr.type = UR_JELLYFISH;
			break;
		case 5:
			oUr.type = UR_SQUIRMBAG;
			break;
		}
		oUr.setSize = iSetSize;
		oUr.message = oMsg;
		oUr.action = this.actionDetermine;
	}
	this.parent.updaterequest(oUr);
	return false;
};

oStgFish.actionDetermine = function(){
	var oPz = this.puzzle;
	var aRemoved = this.message.removed;
	for (var iM = 0; aRemoved.length > iM; iM++){
		oPz.data[aRemoved[iM].ad] &= ~aRemoved[iM].candi;
		oPz.cell[aRemoved[iM].ad].update(true);
	}
};

var oStgXWing = new NodeObject();
oStgXWing.setSize = 2;
oStgXWing.onsolverequest = oStgFish.onsolverequest;
oStgXWing.actionDetermine = oStgFish.actionDetermine;

var oStgSwordfish = new NodeObject();
oStgSwordfish.setSize = 3;
oStgSwordfish.onsolverequest = oStgFish.onsolverequest;
oStgSwordfish.actionDetermine = oStgFish.actionDetermine;

var oStgJellyfish = new NodeObject();
oStgJellyfish.setSize = 4;
oStgJellyfish.onsolverequest = oStgFish.onsolverequest;
oStgJellyfish.actionDetermine = oStgFish.actionDetermine;

var oStgSquirmBag = new NodeObject();
oStgSquirmBag.setSize = 5;
oStgSquirmBag.onsolverequest = oStgFish.onsolverequest;
oStgSquirmBag.actionDetermine = oStgFish.actionDetermine;

/* ***********************************************
	Strategy : Y-Wing 
	Need a modification : Box-Line intersection does not work well.
*********************************************** */
var oStgYWing = new NodeObject();

oStgYWing.onsolverequest = function(oSr){
	var oPz = oSr.puzzle;
	var oUr = new UpdateRequest(UR_NONE, oPz);
	var oMsg = null;

	// Create a list of bi-valued cell
	var aBivalued = [];
	for (var iAd = 0; SDK_SIZE > iAd; iAd++){
		if (oPz.cell[iAd].size == 2){
			aBivalued.push(iAd);
		}
	}
	// Run over the list of bi-valued cells
	var iAd1 = 0, iAd2 = 0, iAd3 = 0, iAdHinge = 0;
	var aComSee = [];
	var iFtCom = 0;
	var iDataHinge = 0, iCurData = 0;
	var bHingeFound = false;
	// Loop for the 1st wing cell
	for (var iPtr1 = 0; aBivalued.length > iPtr1; iPtr1++){
		iAd1 = aBivalued[iPtr1];
		// Loop for the 2ndst wing cell
		for (var iPtr2 = iPtr1+1; aBivalued.length > iPtr2; iPtr2++){
			iAd2 = aBivalued[iPtr2];
			if (_cansee(iAd1, iAd2)){
				continue;
			}
			// Preset, assuming that they are all divided.
			iFtCom = oPz.data[iAd1] & oPz.data[iAd2];
			iDataHinge = (oPz.data[iAd1] | oPz.data[iAd2]) & ~ iFtCom;
			if (_value(iFtCom) == 0 || _size(iDataHinge) != 2){
				continue;
			}
			bHingeFound = false;
			// Create a common visible set
			aComSee = LU_FT_BASIC[iAd1].concat();
			for (var iPtr3 = 0; aComSee.length > iPtr3; ){
				iAd3 = aComSee[iPtr3];
				if (_bothcansee(iAd3, iAd2)){
					iCurData = oPz.data[iAd3];
					if (iCurData == iDataHinge){
						iAdHinge = iAd3;
						bHingeFound = true;
					}
					else if (iCurData & iFtCom){
						iPtr3++;
						continue;
					}
				}
				aComSee.splice(iPtr3, 1);
			}
			// If a hinge cell is found, then
			if (bHingeFound && aComSee.length){
				oMsg = {
					hinge : new Candi(iAdHinge, iDataHinge),
					wing1 : new Candi(iAd1, oPz.data[iAd1]),
					wing2 : new Candi(iAd2, oPz.data[iAd2]),
					value : _value(iFtCom),
					removed : []
				};
				for (var iPtr3 = 0; aComSee.length > iPtr3; iPtr3++){
					oMsg.removed.push(new Candi(aComSee[iPtr3], iFtCom));
				}
			}
		} // End of Loop : 2nd wing cell
	} // End of Loop : 1st wing cell
	
	if (oMsg){
		oUr.type = UR_YWING;
		oUr.message = oMsg;
		oUr.action = this.actionDetermine;
	}
	this.parent.updaterequest(oUr, oPz);
	return false;
};

oStgYWing.actionDetermine = function(){
	var oPz = this.puzzle;
	var aRemoved = this.message.removed;
	for (var iM = 0; aRemoved.length > iM; iM++){
		oPz.data[aRemoved[iM].ad] &= ~aRemoved[iM].candi;
		oPz.cell[aRemoved[iM].ad].update(true);
	}
};

/* ***********************************************
	Strategy : Bent Naked SEt 
*********************************************** */
var STG_BN_WEAK = 1;
var STG_BN_STRONG = 2;

var oStgBentNaked = new NodeObject();
oStgBentNaked.maxWingSize = 6;

oStgBentNaked.onsolverequest = function(oSr){
	var oPz = oSr.puzzle;
	var oUr = new UpdateRequest(UR_NONE, oPz);
	var iMaxWingSize = oUr.maxWingSize || this.maxWingSize;
	var oMsg = null;

	main_loop :
	for (var iMode = 0; 2 > iMode; iMode++){
		for (var iPtrLu = 0; SDK_SUBSIZE > iPtrLu; iPtrLu++){
			// Choose a mode
			var apLu;
			switch (iMode){
			case 0 :
				apLu = LU_FT_ROW_TRIAD[iPtrLu];
				break;
			case 1 :
				apLu = LU_FT_COL_TRIAD[iPtrLu];
				break;
			}
			// Create a list of n-sets
			var aListWing0 = [];
			var aListWing1 = [];
			var aListHub = [];
			var iAd = 0;
			for (var iPtr = 0; SDK_LEN_FT_LOCK > iPtr; iPtr++){
				if (oPz.cell[iAd = apLu[0][iPtr]].size > 1){
					aListWing0.push(new Candi(iAd, oPz.data[iAd]));
				}
				if (oPz.cell[iAd = apLu[1][iPtr]].size > 1){
					aListWing1.push(new Candi(iAd, oPz.data[iAd]));
				}
			}
			for (var iPtr = 0; SDK_DEGREE > iPtr; iPtr++){
				if (oPz.cell[iAd = apLu[2][iPtr]].size > 1){
					aListHub.push(new Candi(iAd, oPz.data[iAd]));
				}
			}
			// Loop for the first wing
			for (var iSize0 = 1; iMaxWingSize >= iSize0 && aListWing0.length >= iSize0; iSize0++){
				var aSubs0;
				switch (iSize0){
				case 1:
					aSubs0 = LU_SUBS1[aListWing0.length];
					break;
				case 2:
					aSubs0 = LU_SUBS2[aListWing0.length];
					break;
				case 3:
					aSubs0 = LU_SUBS3[aListWing0.length];
					break;
				case 4:
					aSubs0 = LU_SUBS4[aListWing0.length];
					break;
				case 5:
					aSubs0 = LU_SUBS5[aListWing0.length];
					break;
				case 6:
					aSubs0 = LU_SUBS6[aListWing0.length];
					break;
				}
				// Loop for the first wing candidate
				for (var iPptr0 = 0; aSubs0.length > iPptr0; iPptr0++){
					var iData0 = 0;
					for (var iN = 0; iSize0 > iN; iN++){
						iData0 |= aListWing0[aSubs0[iPptr0][iN]].candi;
					}
					// Loop for the second wing
					for (var iSize1 = 1; iMaxWingSize >= iSize1 && aListWing1.length >= iSize1; iSize1++){
						var aSubs1;
						switch (iSize1){
						case 1:
							aSubs1 = LU_SUBS1[aListWing1.length];
							break;
						case 2:
							aSubs1 = LU_SUBS2[aListWing1.length];
							break;
						case 3:
							aSubs1 = LU_SUBS3[aListWing1.length];
							break;
						case 4:
							aSubs1 = LU_SUBS4[aListWing1.length];
							break;
						case 5:
							aSubs1 = LU_SUBS5[aListWing1.length];
							break;
						case 6:
							aSubs1 = LU_SUBS6[aListWing1.length];
							break;
						}
						// Loop for the second wing candidate
						for (var iPptr1 = 0; aSubs1.length > iPptr1; iPptr1++){
							var iData1 = 0;
							for (var iN = 0; iSize1 > iN; iN++){
								iData1 |= aListWing1[aSubs1[iPptr1][iN]].candi;
							}
							var iFtInt = iData0 & iData1;
							var iSizeInt = _size(iFtInt);
							// Loop for the hub
							for (var iSize2 = 0; aListHub.length >= iSize2; iSize2++){
								var aSubs2;
								switch (iSize2){
								case 0:
									aSubs2 = [];
									break;
								case 1:
									aSubs2 = LU_SUBS1[aListHub.length];
									break;
								case 2:
									aSubs2 = LU_SUBS2[aListHub.length];
									break;
								case 3:
									aSubs2 = LU_SUBS3[aListHub.length];
									break;
								}
								// Loop for the hub candidate
								var iPptr2 = 0;
								do {
									var aBns = [];
									for (var iN = 0; iSize0 > iN; iN++){
										aBns.push(aListWing0[aSubs0[iPptr0][iN]]);
									}
									for (var iN = 0; iSize1 > iN; iN++){
										aBns.push(aListWing1[aSubs1[iPptr1][iN]]);
									}
									var iData2 = 0;
									for (var iN = 0; iSize2 > iN; iN++){
										iData2 |= aListHub[aSubs2[iPptr2][iN]].candi;
										aBns.push(aListHub[aSubs2[iPptr2][iN]]);
									}
									// Beginning of actual code
									var iData = iData0 | iData1 | iData2;
									var iSigma = _size(iData) - aBns.length;
									// Bent-Naked Type 1
									var aRemoved = [];
									var iType = 0;
									// Strong
									if (iSizeInt == 0 && iSigma == 0){
										iType = STG_BN_STRONG;
										var iFt = 0;
										var aComSee = [];
										loop_removal :
										for (var iValue = 1; iValue <= SDK_ORDER; iValue++){
											iFt = 1 << iValue;
											if (! (iData & iFt)){
												continue;
											}
											// Create a list of common visibility cell
											aComSee = [];
											for (var iAd = 0; SDK_SIZE > iAd; iAd++){
												if (oPz.cell[iAd].size > 1 && oPz.data[iAd] & iFt){
													aComSee.push(iAd);
												}
											}
											for (var iN = 0; aBns.length > iN; iN++){
												if (! (aBns[iN].candi & iFt)){
													continue;
												}
												for (var iM = 0; aComSee.length > iM; ){
													if (_bothcansee(aBns[iN].ad, aComSee[iM])){
														iM++;
													}
													else {
														aComSee.splice(iM, 1);
													}
												}
												if (aComSee.length == 0){
													continue loop_removal;
												}
											}
											// Add to a removed list
											for (var iM = 0; aComSee.length > iM; iM++){
												aRemoved.push(new Candi(aComSee[iM], iFt));
											}
										}
									}
									// Weak
									else if (iSigma + iSizeInt <= 1){
										iType = STG_BN_WEAK;
										var aValList = _candi(iFtInt);
										var iFt = 0;
										var aComSee = [];
										loop_removal :
										for (var iL = 0; aValList.length > iL; iL++){
											iFt = 1 << aValList[iL];
											// Create a list of common visibility cell
											aComSee = [];
											for (var iAd = 0; SDK_SIZE > iAd; iAd++){
												if (oPz.cell[iAd].size > 1 && oPz.data[iAd] & iFt){
													aComSee.push(iAd);
												}
											}
											for (var iN = 0; aBns.length > iN; iN++){
												if (! (aBns[iN].candi & iFt)){
													continue;
												}
												for (var iM = 0; aComSee.length > iM; ){
													if (_bothcansee(aBns[iN].ad, aComSee[iM])){
														iM++;
													}
													else {
														aComSee.splice(iM, 1);
													}
												}
												if (aComSee.length == 0){
													continue loop_removal;
												}
											}
											// Add to a removed list
											for (var iM = 0; aComSee.length > iM; iM++){
												aRemoved.push(new Candi(aComSee[iM], iFt));
											}
										}

									}
									// If the removal process was effective
									if (aRemoved.length){
										oMsg = {
											type : iType,
											wing0 : [],
											wing1 : [],
											hub : [],
											candiIntersect : iFtInt, 
											candiWing0 : iData0, 
											candiWing1 : iData1, 
											sigma : iSigma, 
											removed : aRemoved
										};
										for (var iN = 0; iSize0 > iN; iN++){
											oMsg.wing0.push(aListWing0[aSubs0[iPptr0][iN]]);
										}
										for (var iN = 0; iSize1 > iN; iN++){
											oMsg.wing1.push(aListWing1[aSubs1[iPptr1][iN]]);
										}
										for (var iN = 0; iSize2 > iN; iN++){
											oMsg.hub.push(aListHub[aSubs2[iPptr2][iN]]);
										}
										break main_loop;
									}
									// End of actual code
									iPptr2++;
								} while(aSubs2.length > iPptr2)
							} // End of Loop : Hub
						} // End of Loop : 2nd Wing Candi
					} // End of Loop : 2nd Wing
				} // End of Loop : 1ist Wing Candi
			} // End of Loop : 1sit Wing		
		} // End of Loop : logical unit
	} // End of Loop : mode

	if (oMsg){
		oUr.type = UR_BENT_NAKED;
		oUr.message = oMsg;
		oUr.action = this.actionDetermine;
	}
	this.parent.updaterequest(oUr);
	return false;
}

oStgBentNaked.actionDetermine = function(){
	var oPz = this.puzzle;
	var aRemoved;
	aRemoved = this.message.removed;
	for (var iM = 0; aRemoved.length > iM; iM++){
		oPz.data[aRemoved[iM].ad] &= ~aRemoved[iM].candi;
		oPz.cell[aRemoved[iM].ad].update(true);
	}
};